{"ast":null,"code":"var _jsxFileName = \"/Users/ada/capstone-scratch/Scratch/src/components/Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport mapStyles from \"../mapStyles\";\nimport { formatRelative } from \"date-fns\";\nimport { restaurantCollection, db } from \"../utils/firebase.js\";\nimport Restaurants from \"./restaurants/restaurants\";\nimport { data } from \"browserslist\";\nimport { firebaseLooper } from \"../utils/helper\";\nimport axios from 'axios';\nimport firebase from \"firebase\"; // import RestaurantList from \"./listall\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst restaurantData = [{\n  id: 1,\n  lat: 47.620084,\n  lng: -122.320126,\n  time: new Date()\n}, {\n  id: 2,\n  lat: 47.614579,\n  lng: -122.333224,\n  time: new Date()\n}, {\n  id: 3,\n  lat: 47.618578,\n  lng: -122.321079,\n  time: new Date()\n}];\nconst mapContainerStyle = {\n  width: \"90vw\",\n  height: \"90vh\"\n};\nconst center = {\n  lat: 47.620084,\n  lng: -122.320126\n};\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true\n};\n\nconst onLoad = marker => {\n  console.log(\"marker: \", marker);\n};\n\nconst position = {\n  lat: 47.605,\n  lng: -122.3344\n};\n\nconst App = () => {\n  _s();\n\n  const [restaurantMarkers, setRestaurantMarkers] = useState([]);\n  const [restaurants, setRestaurants] = useState([]);\n  useEffect(() => {\n    const r = firebase.database().ref('Restaurants');\n    const search = 'e';\n    r.on('value', snapshot => {\n      let filteredResults = Array.from(snapshot.val()).filter(result => result.Name.toLowerCase().includes(search));\n      setRestaurants(filteredResults);\n    }); // axios.get('https://yuliacapstone-default-rtdb.firebaseio.com/Restaurants.json')\n    //   .then(  response => {\n    //           // this.setState({\n    //           console.log('hi')\n    //           //     restaurants\n    //           // });\n    //           console.log(response.data)\n    //           setRestaurants(response.data)\n    //           // console.log(this.state,'<---restaurants state')\n    //       }).catch(error=> {\n    //           console.log(error)\n    //           console.log('random')\n    //       });\n  }, []); // useEffect(() => {\n  //   db.collection(\"restaurants\")\n  //     .get()\n  //     .then((snapshot) => {\n  //       const restaurants = firebaseLooper(snapshot);\n  //       console.log(restaurants);\n  //       setRestaurantMarkers(restaurants);\n  //     })\n  //     .catch((e) => {\n  //       console.log(e);\n  //     });\n  // }, []);\n\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\n  });\n  const [selected, setSelected] = React.useState(null);\n  if (loadError) return \"Error loading maps\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), isLoaded && /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: mapContainerStyle,\n      zoom: 13,\n      center: center,\n      options: options,\n      id: \"marker-example\",\n      children: [restaurants.map(restaurant => /*#__PURE__*/_jsxDEV(Marker, {\n        onLoad: onLoad,\n        position: {\n          lat: restaurant.Location.lat,\n          lng: restaurant.Location.lng\n        } //   icon={{\n        //     url: \"spoon.svg\",\n        //     scaledSize: new window.google.maps.Size(30, 30),\n        //     origin: new window.google.maps.Point(0, 0),\n        //     anchor: new window.google.maps.Point(15, 15),\n        //   }}\n        ,\n        onClick: () => {\n          setSelected(restaurant);\n        }\n      }, restaurant.Name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }, this)), selected ? /*#__PURE__*/_jsxDEV(InfoWindow, {\n        position: {\n          lat: selected.Location.lat,\n          lng: selected.Location.lng\n        },\n        onCloseClick: () => {\n          setSelected(null);\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\" \", selected.Name, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: selected.Address\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"Yps/WE9W+7sUG3a09vvy8rhW9fs=\", false, function () {\n  return [useLoadScript];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/ada/capstone-scratch/Scratch/src/components/Map.js"],"names":["React","useState","useEffect","GoogleMap","useLoadScript","Marker","InfoWindow","mapStyles","formatRelative","restaurantCollection","db","Restaurants","data","firebaseLooper","axios","firebase","restaurantData","id","lat","lng","time","Date","mapContainerStyle","width","height","center","options","styles","disableDefaultUI","zoomControl","onLoad","marker","console","log","position","App","restaurantMarkers","setRestaurantMarkers","restaurants","setRestaurants","r","database","ref","search","on","snapshot","filteredResults","Array","from","val","filter","result","Name","toLowerCase","includes","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","selected","setSelected","map","restaurant","Location","Address"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport {\n  GoogleMap,\n  useLoadScript,\n  Marker,\n  InfoWindow,\n} from \"@react-google-maps/api\";\n\nimport mapStyles from \"../mapStyles\";\nimport { formatRelative } from \"date-fns\";\nimport { restaurantCollection, db } from \"../utils/firebase.js\";\nimport Restaurants from \"./restaurants/restaurants\";\nimport { data } from \"browserslist\";\nimport { firebaseLooper } from \"../utils/helper\";\nimport axios from 'axios';\nimport firebase from \"firebase\";\n// import RestaurantList from \"./listall\";\n\n\n\n\n\nconst restaurantData = [\n  { id: 1, lat: 47.620084, lng: -122.320126, time: new Date() },\n  { id: 2, lat: 47.614579, lng: -122.333224, time: new Date() },\n  { id: 3, lat: 47.618578, lng: -122.321079, time: new Date() },\n];\n\nconst mapContainerStyle = {\n  width: \"90vw\",\n  height: \"90vh\",\n};\n\nconst center = {\n  lat: 47.620084,\n  lng: -122.320126,\n};\n\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true,\n};\n\nconst onLoad = (marker) => {\n  console.log(\"marker: \", marker);\n};\nconst position = {\n  lat: 47.605,\n  lng: -122.3344,\n};\n\nconst App = () => {\n  const [restaurantMarkers, setRestaurantMarkers] = useState([]);\n  const [restaurants, setRestaurants] = useState([]);\n\n\n\n  useEffect(() => {\n\n    const r = firebase.database().ref('Restaurants');\n    const search = 'e';\n    r.on('value', (snapshot) => {\n      let filteredResults = Array.from(snapshot.val()).filter((result) => result.Name.toLowerCase().includes(search));\n      setRestaurants(filteredResults);\n    });\n\n\n    // axios.get('https://yuliacapstone-default-rtdb.firebaseio.com/Restaurants.json')\n    //   .then(  response => {\n    //           // this.setState({\n    //           console.log('hi')\n    //           //     restaurants\n    //           // });\n    //           console.log(response.data)\n    //           setRestaurants(response.data)\n\n    //           // console.log(this.state,'<---restaurants state')\n    //       }).catch(error=> {\n    //           console.log(error)\n    //           console.log('random')\n    //       });\n    },\n    []\n  );\n\n          \n\n\n    \n\n\n  // useEffect(() => {\n  //   db.collection(\"restaurants\")\n  //     .get()\n  //     .then((snapshot) => {\n  //       const restaurants = firebaseLooper(snapshot);\n  //       console.log(restaurants);\n  //       setRestaurantMarkers(restaurants);\n  //     })\n  //     .catch((e) => {\n  //       console.log(e);\n  //     });\n  // }, []);\n\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n  });\n\n  const [selected, setSelected] = React.useState(null);\n\n  if (loadError) return \"Error loading maps\";\n  return (\n    <div>\n      <form>\n        <input type=\"search\"></input>\n      </form>\n      \n      {isLoaded && (\n        <GoogleMap\n          mapContainerStyle={mapContainerStyle}\n          zoom={13}\n          center={center}\n          options={options}\n          id=\"marker-example\"\n        >\n          {restaurants.map((restaurant) => (\n            <Marker\n              key={restaurant.Name}\n              onLoad={onLoad}\n              position={{ lat: restaurant.Location.lat, lng: restaurant.Location.lng }}\n              //   icon={{\n              //     url: \"spoon.svg\",\n              //     scaledSize: new window.google.maps.Size(30, 30),\n              //     origin: new window.google.maps.Point(0, 0),\n              //     anchor: new window.google.maps.Point(15, 15),\n              //   }}\n              onClick={() => {\n                setSelected(restaurant);\n              }}\n            />\n          ))}\n\n          {selected ? (\n            <InfoWindow\n              position={{ lat: selected.Location.lat, lng: selected.Location.lng }}\n              onCloseClick={() => {\n                setSelected(null);\n              }} \n            >\n              <div>\n                <h2> {selected.Name} </h2>\n                <p>\n                  {selected.Address}\n                  \n                </p>\n              </div>\n            </InfoWindow>\n          ) : null}\n        </GoogleMap>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}