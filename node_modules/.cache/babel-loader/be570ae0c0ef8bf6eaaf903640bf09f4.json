{"ast":null,"code":"var _jsxFileName = \"/Users/ada/capstone-file/src/App.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { GoogleMap, useLoadScript, Marker, InfoWindow, MarkerClusterer } from 'google-maps-react';\nimport mapStyles from \"./mapStyles\";\nimport { formatRelative } from \"date-fns\";\nimport Restaurants from \"./components/restaurants/restaurants\";\nimport { data } from \"browserslist\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst restaurantData = [{\n  id: 1,\n  lat: 47.597998,\n  lng: -122.318739,\n  time: new Date()\n}, {\n  id: 2,\n  lat: 47.600757,\n  lng: -122.332526,\n  time: new Date()\n}, {\n  id: 3,\n  lat: 47.598528,\n  lng: -122.326986,\n  time: new Date()\n}];\nconst mapContainerStyle = {\n  width: '90vw',\n  height: '90vh'\n};\nconst center = {\n  lat: 47.599940,\n  lng: -122.327750\n};\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true\n};\n\nconst onLoad = marker => {\n  console.log('marker: ', marker);\n};\n\nconst position = {\n  lat: 47.6050,\n  lng: -122.3344\n};\n\nconst App = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\n  });\n\n  const App = () => {\n    _s();\n\n    // state to hold all library object locations that we can pass to maps API. calling helper function to set initial state\n    const [restaurantMarkers, setRestaurantMarkers] = useState([]);\n    useEffect(() => {\n      db.collection('restaurants').get().then(snapshot => {\n        const restaurants = firebaseLooper(snapshot);\n        console.log(restaurants);\n        setRestaurantMarkers(restaurants);\n      }).catch(e => {\n        console.log(e);\n      });\n    }, []);\n    const {\n      isLoaded,\n      loadError\n    } = useLoadScript({\n      googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\n    }); // we need to create a variable that holds the state of libraries component here so we can render the markers to the page\n\n    const [selected, setSelected] = React.useState(null); // const onMapClick = React.useCallback((event) => {\n    //   setMarkers(current => [ //when user clicks, call the setMarkers function. Is that built in??\n    //     ...current, \n    //     {  \n    //     lat: event.latLng.lat(),\n    //     lng: event.latLng.lng(),\n    //     time: new Date(),\n    //   },\n    // ]); \n    // }, []);\n\n    if (loadError) return \"Error loading maps\";\n    if (!isLoaded) return \"Loading Maps\"; //props: container, see notes above where the variable is\n    //position the map\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: mapContainerStyle,\n        zoom: 15,\n        center: center,\n        options: options,\n        id: \"marker-example\",\n        children: [restaurantData.map(marker => /*#__PURE__*/_jsxDEV(Marker, {\n          onLoad: onLoad,\n          position: {\n            lat: marker.lat,\n            lng: marker.lng\n          } // position = { position }\n          ,\n          icon: {\n            url: 'spoon.svg',\n            scaledSize: new window.google.maps.Size(30, 30),\n            origin: new window.google.maps.Point(0, 0),\n            anchor: new window.google.maps.Point(15, 15)\n          },\n          onClick: () => {\n            setSelected(marker);\n          }\n        }, marker.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 9\n        }, this)), selected ? /*#__PURE__*/_jsxDEV(InfoWindow, {\n          position: {\n            lat: selected.lat,\n            lng: selected.lng\n          },\n          onCloseClick: () => {\n            setSelected(null);\n          } //have to reset to null once x is clicked on window so that they can pop up agian when clicked\n          ,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \" image goes here \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Restaurants list last updated \", formatRelative(selected.time, new Date())]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 9\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 12\n    }, this);\n  };\n\n  _s(App, \"sjYmJZ7y2f/oQdiptod4J0oPrpM=\", false, function () {\n    return [useLoadScript];\n  });\n};\n\n_s2(App, \"GIyleMSmvwUkHLuj8p7tW9iDaJE=\", false, function () {\n  return [useLoadScript];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/ada/capstone-file/src/App.js"],"names":["React","useState","useEffect","GoogleMap","useLoadScript","Marker","InfoWindow","MarkerClusterer","mapStyles","formatRelative","Restaurants","data","restaurantData","id","lat","lng","time","Date","mapContainerStyle","width","height","center","options","styles","disableDefaultUI","zoomControl","onLoad","marker","console","log","position","App","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","restaurantMarkers","setRestaurantMarkers","db","collection","get","then","snapshot","restaurants","firebaseLooper","catch","e","selected","setSelected","map","url","scaledSize","window","google","maps","Size","origin","Point","anchor"],"mappings":"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","sourcesContent":["\nimport React, { useState, useEffect } from 'react';\n\nimport {\n    GoogleMap,\n    useLoadScript,\n    Marker,\n    InfoWindow,\n    MarkerClusterer,\n} from 'google-maps-react';\n\n\n\n\nimport mapStyles from \"./mapStyles\";\nimport { formatRelative } from \"date-fns\";\nimport Restaurants from \"./components/restaurants/restaurants\";\nimport { data } from \"browserslist\";\n\n\nconst restaurantData = [\n    {   id: 1,\n        lat:47.597998,\n        lng:-122.318739,\n        time: new Date()\n    },\n    {   id: 2,\n        lat:47.600757,\n        lng:-122.332526,\n        time: new Date()\n    },\n    {   id: 3,\n        lat:47.598528,\n        lng:-122.326986,\n        time: new Date()\n    }\n\n\n]\n\nconst mapContainerStyle = {\n    width: '90vw',\n    height: '90vh',\n}\n\nconst center = {\n    lat: 47.599940,\n    lng: -122.327750,\n}\n\nconst options = {\n    styles: mapStyles,\n    disableDefaultUI: true,  \n    zoomControl: true,\n}\n\nconst onLoad = marker => {\n    console.log('marker: ', marker)\n}\nconst position = {\n    lat: 47.6050,\n    lng: -122.3344\n}\n\nconst App = () => {\n    \n    \n    const {isLoaded, loadError} = useLoadScript({\n        googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n        \n        \n    });\n\n    const App = () => {\n    \n        // state to hold all library object locations that we can pass to maps API. calling helper function to set initial state\n        const[restaurantMarkers, setRestaurantMarkers] = useState([]);\n    \n        useEffect(() => {\n            \n            db.collection('restaurants').get().then(snapshot => {\n                const restaurants = firebaseLooper(snapshot);\n                console.log(restaurants);\n                setRestaurantMarkers(restaurants)\n            }).catch (e => {\n                console.log(e)\n            })\n        },[]);\n        \n        const {isLoaded, loadError} = useLoadScript({\n            googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n            \n        });\n    \n        // we need to create a variable that holds the state of libraries component here so we can render the markers to the page\n        \n    \n        \n       \n    const [selected, setSelected] = React.useState(null);\n    \n    \n\n\n\n    // const onMapClick = React.useCallback((event) => {\n    //   setMarkers(current => [ //when user clicks, call the setMarkers function. Is that built in??\n    //     ...current, \n    //     {  \n    //     lat: event.latLng.lat(),\n    //     lng: event.latLng.lng(),\n    //     time: new Date(),\n    //   },\n    // ]); \n    // }, []);\n\n\n    if (loadError) return \"Error loading maps\";\n    if (!isLoaded) return \"Loading Maps\";\n    //props: container, see notes above where the variable is\n    //position the map\n    return <div>\n\n        <GoogleMap \n        mapContainerStyle={mapContainerStyle} \n        zoom = {15} \n        center = {center}\n        options = { options }\n        id= \"marker-example\"\n\n        >\n        {restaurantData.map((marker => (\n        <Marker \n            key={marker.id}     \n            onLoad={onLoad}\n            position = {{lat: marker.lat, lng: marker.lng}}\n            // position = { position }\n            icon= {{\n            url: 'spoon.svg',\n            scaledSize: new window.google.maps.Size(30,30),\n            origin: new window.google.maps.Point(0,0),\n            anchor: new window.google.maps.Point(15,15) \n            }}\n            onClick={() => {\n            setSelected(marker);\n            }}\n            />\n        )))}\n        \n        {selected ? (\n        <InfoWindow position= {{lat: selected.lat, lng: selected.lng}} onCloseClick = {() => {\n        setSelected(null)}} //have to reset to null once x is clicked on window so that they can pop up agian when clicked\n        >\n        <div>\n            <h2> image goes here </h2>\n            <p>Restaurants list last updated {formatRelative(selected.time, new Date())}</p>\n        </div>\n        </InfoWindow>\n        ) : null} \n        </GoogleMap>\n        </div>;\n    };\n}\n    \nexport default App;\n"]},"metadata":{},"sourceType":"module"}