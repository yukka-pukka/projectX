{"ast":null,"code":"var _jsxFileName = \"/Users/ada/capstone-file/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { GoogleMap, useLoadScript, Marker, InfoWindow, MarkerClusterer } from \"@react-google-maps/api\";\nimport { Router, Switch } from \"react-router-dom\";\nimport mapStyles from \"./mapStyles\";\nimport Header from \"./components/header\";\nimport { formatRelative } from \"date-fns\";\nimport { restaurantCollection, db } from \"./utils/firebase.js\";\nimport Restaurants from \"./components/restaurants/restaurants\";\nimport { data } from \"browserslist\";\nimport { firebaseLooper } from \"./utils/helper\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst restaurantData = [{\n  id: 1,\n  lat: 47.597998,\n  lng: -122.318739,\n  time: new Date()\n}, {\n  id: 2,\n  lat: 47.600757,\n  lng: -122.332526,\n  time: new Date()\n}, {\n  id: 3,\n  lat: 47.598528,\n  lng: -122.326986,\n  time: new Date()\n}];\nconst mapContainerStyle = {\n  width: \"90vw\",\n  height: \"90vh\"\n};\nconst center = {\n  lat: 47.59994,\n  lng: -122.32775\n};\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true\n};\n\nconst onLoad = marker => {\n  console.log(\"marker: \", marker);\n};\n\nconst position = {\n  lat: 47.605,\n  lng: -122.3344\n};\n\nconst App = () => {\n  _s();\n\n  // state to hold all library object locations that we can pass to maps API. calling helper function to set initial state\n  const [restaurantMarkers, setRestaurantMarkers] = useState([]);\n  useEffect(() => {\n    db.collection(\"restaurants\").get().then(snapshot => {\n      const restaurants = firebaseLooper(snapshot);\n      console.log(restaurants);\n      setRestaurantMarkers(restaurants);\n    }).catch(e => {\n      console.log(e);\n    });\n  }, []);\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\n  });\n  const [selected, setSelected] = React.useState(null);\n  if (loadError) return \"Error loading maps\"; //props: container, see notes above where the variable is\n  //position the map\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), isLoaded && /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: mapContainerStyle,\n        zoom: 15,\n        center: center,\n        options: options,\n        id: \"marker-example\",\n        children: [restaurantData.map(restaurant => /*#__PURE__*/_jsxDEV(Marker, {\n          onLoad: onLoad,\n          position: {\n            lat: restaurant.lat,\n            lng: restaurant.lng\n          } //   icon={{\n          //     url: \"spoon.svg\",\n          //     scaledSize: new window.google.maps.Size(30, 30),\n          //     origin: new window.google.maps.Point(0, 0),\n          //     anchor: new window.google.maps.Point(15, 15),\n          //   }}\n          ,\n          onClick: () => {\n            setSelected(restaurant);\n          }\n        }, restaurant.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }, this)), selected ? /*#__PURE__*/_jsxDEV(InfoWindow, {\n          position: {\n            lat: selected.lat,\n            lng: selected.lng\n          },\n          onCloseClick: () => {\n            setSelected(null);\n          } //have to reset to null once x is clicked on window so that they can pop up agian when clicked\n          ,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \" image goes here \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Restaurants list last updated\", \" \", formatRelative(selected.time, new Date())]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 15\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"zdfuILVhRjiUpE7U7eS5qGQL6r4=\", false, function () {\n  return [useLoadScript];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/ada/capstone-file/src/App.js"],"names":["React","useState","useEffect","GoogleMap","useLoadScript","Marker","InfoWindow","MarkerClusterer","Router","Switch","mapStyles","Header","formatRelative","restaurantCollection","db","Restaurants","data","firebaseLooper","restaurantData","id","lat","lng","time","Date","mapContainerStyle","width","height","center","options","styles","disableDefaultUI","zoomControl","onLoad","marker","console","log","position","App","restaurantMarkers","setRestaurantMarkers","collection","get","then","snapshot","restaurants","catch","e","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","selected","setSelected","map","restaurant"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport {\n  GoogleMap,\n  useLoadScript,\n  Marker,\n  InfoWindow,\n  MarkerClusterer,\n} from \"@react-google-maps/api\";\nimport { Router, Switch } from \"react-router-dom\";\n\nimport mapStyles from \"./mapStyles\";\nimport Header from \"./components/header\";\nimport { formatRelative } from \"date-fns\";\nimport { restaurantCollection, db } from \"./utils/firebase.js\";\nimport Restaurants from \"./components/restaurants/restaurants\";\nimport { data } from \"browserslist\";\nimport { firebaseLooper } from \"./utils/helper\";\n\nconst restaurantData = [\n  { id: 1, lat: 47.597998, lng: -122.318739, time: new Date() },\n  { id: 2, lat: 47.600757, lng: -122.332526, time: new Date() },\n  { id: 3, lat: 47.598528, lng: -122.326986, time: new Date() },\n];\n\nconst mapContainerStyle = {\n  width: \"90vw\",\n  height: \"90vh\",\n};\n\nconst center = {\n  lat: 47.59994,\n  lng: -122.32775,\n};\n\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true,\n};\n\nconst onLoad = (marker) => {\n  console.log(\"marker: \", marker);\n};\nconst position = {\n  lat: 47.605,\n  lng: -122.3344,\n};\n\nconst App = () => {\n  // state to hold all library object locations that we can pass to maps API. calling helper function to set initial state\n  const [restaurantMarkers, setRestaurantMarkers] = useState([]);\n\n  useEffect(() => {\n    db.collection(\"restaurants\")\n      .get()\n      .then((snapshot) => {\n        const restaurants = firebaseLooper(snapshot);\n        console.log(restaurants);\n        setRestaurantMarkers(restaurants);\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  }, []);\n\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n  });\n\n  const [selected, setSelected] = React.useState(null);\n\n  if (loadError) return \"Error loading maps\";\n  //props: container, see notes above where the variable is\n  //position the map\n  return (\n    <Router>     \n      <div>\n        <Header />\n        {isLoaded && (\n          <GoogleMap\n            mapContainerStyle={mapContainerStyle}\n            zoom={15}\n            center={center}\n            options={options}\n            id=\"marker-example\"\n          >\n            {restaurantData.map((restaurant) => (\n              <Marker\n                key={restaurant.id}\n                onLoad={onLoad}\n                position={{ lat: restaurant.lat, lng: restaurant.lng }}\n                //   icon={{\n                //     url: \"spoon.svg\",\n                //     scaledSize: new window.google.maps.Size(30, 30),\n                //     origin: new window.google.maps.Point(0, 0),\n                //     anchor: new window.google.maps.Point(15, 15),\n                //   }}\n                onClick={() => {\n                  setSelected(restaurant);\n                }}\n              />\n            ))}\n\n            {selected ? (\n              <InfoWindow\n                position={{ lat: selected.lat, lng: selected.lng }}\n                onCloseClick={() => {\n                  setSelected(null);\n                }} //have to reset to null once x is clicked on window so that they can pop up agian when clicked\n              >\n                <div>\n                  <h2> image goes here </h2>\n                  <p>\n                    Restaurants list last updated{\" \"}\n                    {formatRelative(selected.time, new Date())}\n                  </p>\n                </div>\n              </InfoWindow>\n            ) : null}\n          </GoogleMap>\n        )}\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}