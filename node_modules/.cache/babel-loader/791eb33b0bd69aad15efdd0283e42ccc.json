{"ast":null,"code":"var _jsxFileName = \"/Users/ada/capstone-scratch/Scratch/src/components/listall/all.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext, useCallback } from 'react'; // import Restaurants from './components/restaurants';\n\nimport axios from 'axios';\nimport { UserContext } from \" components/listall\";\nimport PropTypes from 'prop-types';\nimport ScrollUpButton from \"react-scroll-up-button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RastaurantList = props => {\n  _s();\n\n  const [latestRestaurants, setLatestRestaurants] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [savedRestaurants, setSavedRestaurants] = useState([]);\n  const user = useContext(UserContext);\n  console.log(user);\n  const getSavedARestaurants = useCallback(() => {\n    if (!user) {\n      return;\n    }\n\n    axios.get(`${props.baseUrl}/users/${user.id}/restaurants`).then(response => {\n      const apiRestaurants = response.data;\n      console.log(apiRestaurants);\n      setSavedRestaurants(apiRestaurants);\n    }).catch(error => {\n      setErrorMessage(error);\n      console.log(error);\n    });\n  }, [props.baseUrl, user]);\n  const getLatestRestaurants = useCallback(() => {\n    axios.get(`${props.baseUrl}`).then(response => {\n      const apiRestaurants = response.data; // console.log(apiRestaurants)\n\n      setLatestRestaurants(apiRestaurants);\n    }).catch(error => {\n      setErrorMessage(error);\n      console.log(error); //the variable doesn't update until re-render\n      // console.log(errorMessage)\n    });\n  }, [props.baseUrl]);\n  useEffect(() => {\n    getSavedRestaurants(); // retrieve user's saved restaurants as well, order not predictable\n\n    getLatestRestaurants();\n  }, [getSavedRestaurants, getLatestRestaurants]);\n\n  const checkIsSaved = RestaurantsId => {\n    // in is indices, of is obj\n    for (const restaurant of savedRestaurants) {\n      if (restaurant.id === restaurantId) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  const RestaurantsComponents = latestRestaurants.map(Restaurants => {\n    var _props$user;\n\n    return /*#__PURE__*/_jsxDEV(Restaurant, {\n      name: Restaurant.name,\n      address: Restaurant.address,\n      description: Restaurant.description,\n      isSaved: checkIsSaved(restaurant.id),\n      restaurantId: restaurant.id,\n      userId: (_props$user = props.user) === null || _props$user === void 0 ? void 0 : _props$user.id,\n      baseUrl: props.baseUrl,\n      onSaveUpdated: getSavedRestaurants // this would be null if user not logged in, safe traversal/elvis operator, if expression on left evaluates then it stops, otherwise keeps going\n\n    }, restaurant.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [RestaurantsComponent, /*#__PURE__*/_jsxDEV(ScrollUpButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n\n_s(RastaurantList, \"DIMq6UGgcYrpLs09VJgToM6ux5U=\");\n\n_c = RastaurantList;\nRestaurantsList.propTypes = {\n  baseUrl: PropTypes.string.isRequired,\n  convertTime: PropTypes.func.isRequired\n};\nexport default RestaurantsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"RastaurantList\");","map":{"version":3,"sources":["/Users/ada/capstone-scratch/Scratch/src/components/listall/all.js"],"names":["React","useState","useEffect","useContext","useCallback","axios","UserContext","PropTypes","ScrollUpButton","RastaurantList","props","latestRestaurants","setLatestRestaurants","errorMessage","setErrorMessage","savedRestaurants","setSavedRestaurants","user","console","log","getSavedARestaurants","get","baseUrl","id","then","response","apiRestaurants","data","catch","error","getLatestRestaurants","getSavedRestaurants","checkIsSaved","RestaurantsId","restaurant","restaurantId","RestaurantsComponents","map","Restaurants","Restaurant","name","address","description","RestaurantsComponent","RestaurantsList","propTypes","string","isRequired","convertTime","func"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext, useCallback} from 'react';\n// import Restaurants from './components/restaurants';\nimport axios from 'axios';\nimport { UserContext } from \" components/listall\";\nimport PropTypes from 'prop-types';\nimport ScrollUpButton from \"react-scroll-up-button\"; \n\n\nconst RastaurantList = (props) => {\n    const [latestRestaurants, setLatestRestaurants] = useState([]);\n    const [errorMessage, setErrorMessage] = useState(null);\n    const [savedRestaurants, setSavedRestaurants] = useState([]); \n    const user = useContext(UserContext)\n    console.log(user)\n\n    const getSavedARestaurants = useCallback(() => {\n        if (!user) { return; }\n        axios.get(`${props.baseUrl}/users/${user.id}/restaurants`)\n        .then((response) => {\n            const apiRestaurants = response.data \n            console.log(apiRestaurants)\n            setSavedRestaurants(apiRestaurants)\n        })\n        .catch((error) => {\n            setErrorMessage(error);\n            console.log(error)\n        })\n    }, [props.baseUrl, user]) \n\n    const getLatestRestaurants = useCallback(() => {\n        axios.get(`${props.baseUrl}`)\n        .then((response) => {\n            const apiRestaurants = response.data \n            // console.log(apiRestaurants)\n            setLatestRestaurants(apiRestaurants)\n        })\n        .catch((error) => {\n            setErrorMessage(error);\n            console.log(error) //the variable doesn't update until re-render\n            // console.log(errorMessage)\n        })\n    }, [props.baseUrl]) \n\n    useEffect(() => {\n        getSavedRestaurants() // retrieve user's saved restaurants as well, order not predictable\n        getLatestRestaurants()\n    }, [getSavedRestaurants, getLatestRestaurants]);\n\n    \n    const checkIsSaved = (RestaurantsId) => {\n        // in is indices, of is obj\n        for (const restaurant of savedRestaurants) {\n            if (restaurant.id === restaurantId) {\n                return true; \n            } \n        }\n        return false; \n    }\n\n\n    const RestaurantsComponents = latestRestaurants.map((Restaurants) => {\n        return (\n            <Restaurant key={restaurant.id}\n            name={Restaurant.name}\n            address={Restaurant.address}\n            description={Restaurant.description}\n            isSaved={checkIsSaved(restaurant.id)}\n            restaurantId={restaurant.id}\n            userId={props.user?.id}\n            baseUrl={props.baseUrl} \n            onSaveUpdated={getSavedRestaurants}\n            \n            // this would be null if user not logged in, safe traversal/elvis operator, if expression on left evaluates then it stops, otherwise keeps going\n            />\n        )\n    })\n\n    return (\n        <div className=\"row\">\n            {RestaurantsComponent}\n            <ScrollUpButton />\n        </div>\n        )\n}\n\nRestaurantsList.propTypes = {\n    baseUrl: PropTypes.string.isRequired,\n    convertTime: PropTypes.func.isRequired\n};\n\nexport default RestaurantsList;"]},"metadata":{},"sourceType":"module"}