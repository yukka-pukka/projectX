{"ast":null,"code":"var _jsxFileName = \"/Users/ada/capstone-file/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { GoogleMap, useLoadScript, Marker, InfoWindow, MarkerClusterer } from 'google-maps-react';\nimport mapStyles from \"./mapStyles\";\nimport Restaurants from \"./components/restaurants/restaurants\";\nimport { data } from \"browserslist\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst restaurantData = [{\n  id: 1,\n  lat: 47.597998,\n  lng: -122.318739,\n  time: new Date()\n}, {\n  id: 2,\n  lat: 47.600757,\n  lng: -122.332526,\n  time: new Date()\n}, {\n  id: 3,\n  lat: 47.598528,\n  lng: -122.326986,\n  time: new Date()\n}];\nconst mapContainerStyle = {\n  width: '90vw',\n  height: '90vh'\n};\nconst center = {\n  lat: 47.599940,\n  lng: -122.327750\n};\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true\n};\n\nconst onLoad = marker => {\n  console.log('marker: ', marker);\n};\n\nconst position = {\n  lat: 47.6050,\n  lng: -122.3344\n};\n\nconst App = () => {\n  _s();\n\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\n  }); // we need to create a variable that holds the state of restaurants component here so we can render the markers to the page\n\n  const [markers, setMarkers] = React.useState([]);\n  const [selected, setSelected] = React.useState(null); // const onMapClick = React.useCallback((event) => {\n  //   setMarkers(current => [ //when user clicks, call the setMarkers function. Is that built in??\n  //     ...current, \n  //     {  \n  //     lat: event.latLng.lat(),\n  //     lng: event.latLng.lng(),\n  //     time: new Date(),\n  //   },\n  // ]); \n  // }, []);\n\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading Maps\"; //props: container, see notes above where the variable is\n  //position the map\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: mapContainerStyle,\n      zoom: 15,\n      center: center,\n      options: options,\n      id: \"marker-example\",\n      children: [libraryData.map(marker => /*#__PURE__*/_jsxDEV(Marker, {\n        onLoad: onLoad,\n        position: {\n          lat: marker.lat,\n          lng: marker.lng\n        } // position = { position }\n        ,\n        icon: {\n          url: 'spoon.svg',\n          scaledSize: new window.google.maps.Size(30, 30),\n          origin: new window.google.maps.Point(0, 0),\n          anchor: new window.google.maps.Point(15, 15)\n        },\n        onClick: () => {\n          setSelected(marker);\n        }\n      }, marker.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)), selected ? /*#__PURE__*/_jsxDEV(InfoWindow, {\n        position: {\n          lat: selected.lat,\n          lng: selected.lng\n        },\n        onCloseClick: () => {\n          setSelected(null);\n        } //have to reset to null once x is clicked on window so that they can pop up agian when clicked\n        ,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \" image goes here \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Restaurants list last updated \", formatRelative(selected.time, new Date())]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 12\n  }, this);\n};\n\n_s(App, \"AT8he6y3ShCQVAFzCY0AlxJA+os=\", false, function () {\n  return [useLoadScript];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/ada/capstone-file/src/App.js"],"names":["React","GoogleMap","useLoadScript","Marker","InfoWindow","MarkerClusterer","mapStyles","Restaurants","data","restaurantData","id","lat","lng","time","Date","mapContainerStyle","width","height","center","options","styles","disableDefaultUI","zoomControl","onLoad","marker","console","log","position","App","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","markers","setMarkers","useState","selected","setSelected","libraryData","map","url","scaledSize","window","google","maps","Size","origin","Point","anchor","formatRelative"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n    GoogleMap,\n    useLoadScript,\n    Marker,\n    InfoWindow,\n    MarkerClusterer,\n} from 'google-maps-react';\n\n\n\n\nimport mapStyles from \"./mapStyles\";\nimport Restaurants from \"./components/restaurants/restaurants\";\nimport { data } from \"browserslist\";\n\n\nconst restaurantData = [\n    {   id: 1,\n        lat:47.597998,\n        lng:-122.318739,\n        time: new Date()\n    },\n    {   id: 2,\n        lat:47.600757,\n        lng:-122.332526,\n        time: new Date()\n    },\n    {   id: 3,\n        lat:47.598528,\n        lng:-122.326986,\n        time: new Date()\n    }\n\n\n]\n\nconst mapContainerStyle = {\n    width: '90vw',\n    height: '90vh',\n}\n\nconst center = {\n    lat: 47.599940,\n    lng: -122.327750,\n}\n\nconst options = {\n    styles: mapStyles,\n    disableDefaultUI: true,  \n    zoomControl: true,\n}\n\nconst onLoad = marker => {\n    console.log('marker: ', marker)\n}\nconst position = {\n    lat: 47.6050,\n    lng: -122.3344\n}\n\nconst App = () => {\n    \n    \n    const {isLoaded, loadError} = useLoadScript({\n        googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n        \n        \n    });\n\n    // we need to create a variable that holds the state of restaurants component here so we can render the markers to the page\n    \n\n    \n    const [markers, setMarkers] = React.useState([]);\n    const [selected, setSelected] = React.useState(null);\n\n    // const onMapClick = React.useCallback((event) => {\n    //   setMarkers(current => [ //when user clicks, call the setMarkers function. Is that built in??\n    //     ...current, \n    //     {  \n    //     lat: event.latLng.lat(),\n    //     lng: event.latLng.lng(),\n    //     time: new Date(),\n    //   },\n    // ]); \n    // }, []);\n\n\n    if (loadError) return \"Error loading maps\";\n    if (!isLoaded) return \"Loading Maps\";\n    //props: container, see notes above where the variable is\n    //position the map\n    return <div>\n\n        <GoogleMap \n        mapContainerStyle={mapContainerStyle} \n        zoom = {15} \n        center = {center}\n        options = { options }\n        id= \"marker-example\"\n\n        >\n        {libraryData.map((marker => (\n        <Marker \n            key={marker.id}     \n            onLoad={onLoad}\n            position = {{lat: marker.lat, lng: marker.lng}}\n            // position = { position }\n            icon= {{\n            url: 'spoon.svg',\n            scaledSize: new window.google.maps.Size(30,30),\n            origin: new window.google.maps.Point(0,0),\n            anchor: new window.google.maps.Point(15,15) \n            }}\n            onClick={() => {\n            setSelected(marker);\n            }}\n            />\n        )))}\n        \n        {selected ? (\n        <InfoWindow position= {{lat: selected.lat, lng: selected.lng}} onCloseClick = {() => {\n        setSelected(null)}} //have to reset to null once x is clicked on window so that they can pop up agian when clicked\n        >\n        <div>\n            <h2> image goes here </h2>\n            <p>Restaurants list last updated {formatRelative(selected.time, new Date())}</p>\n        </div>\n        </InfoWindow>\n        ) : null} \n        </GoogleMap>\n        </div>;\n    };\n\n    \nexport default App;\n"]},"metadata":{},"sourceType":"module"}