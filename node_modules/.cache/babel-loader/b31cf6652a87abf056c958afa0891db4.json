{"ast":null,"code":"var _jsxFileName = \"/Users/ada/capstone-scratch/Scratch/src/components/Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport mapStyles from \"../mapStyles\";\nimport { formatRelative } from \"date-fns\";\nimport { restaurantCollection, db } from \"../utils/firebase.js\";\nimport Restaurants from \"./restaurants/restaurants\";\nimport { data } from \"browserslist\";\nimport { firebaseLooper } from \"../utils/helper\";\nimport axios from 'axios';\nimport RestaurantList from \"./components/listall\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst restaurantData = [{\n  id: 1,\n  lat: 47.620084,\n  lng: -122.320126,\n  time: new Date()\n}, {\n  id: 2,\n  lat: 47.614579,\n  lng: -122.333224,\n  time: new Date()\n}, {\n  id: 3,\n  lat: 47.618578,\n  lng: -122.321079,\n  time: new Date()\n}];\nconst mapContainerStyle = {\n  width: \"90vw\",\n  height: \"90vh\"\n};\nconst center = {\n  lat: 47.620084,\n  lng: -122.320126\n};\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true\n};\n\nconst onLoad = marker => {\n  console.log(\"marker: \", marker);\n};\n\nconst position = {\n  lat: 47.605,\n  lng: -122.3344\n};\n\nconst App = () => {\n  _s();\n\n  const [restaurantMarkers, setRestaurantMarkers] = useState([]); // const [restaurants, setRestaurants] = useState([]);\n  // useEffect(() => {\n  // \n  // axios.get('https://yuliacapstone-default-rtdb.firebaseio.com/restaurants.json')\n  //     .then(  response => {\n  //             // this.setState({\n  //             console.log('hi')\n  //             //     restaurants\n  //             // });\n  //             console.log(response.data)\n  //             setRestaurants(response.data)\n  //             // console.log(this.state,'<---restaurants state')\n  //         }).catch(error=> {\n  //             console.log(error)\n  //             console.log('random')\n  //         });\n  //       }, []);\n\n  useEffect(() => {\n    db.collection(\"restaurants\").get().then(snapshot => {\n      const restaurants = firebaseLooper(snapshot);\n      console.log(restaurants);\n      setRestaurantMarkers(restaurants);\n    }).catch(e => {\n      console.log(e);\n    });\n  }, []);\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\n  });\n  const [selected, setSelected] = React.useState(null);\n  if (loadError) return \"Error loading maps\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLoaded && /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: mapContainerStyle,\n      zoom: 13,\n      center: center,\n      options: options,\n      id: \"marker-example\",\n      children: [restaurantData.map(restaurant => /*#__PURE__*/_jsxDEV(Marker, {\n        onLoad: onLoad,\n        position: {\n          lat: restaurant.lat,\n          lng: restaurant.lng\n        } //   icon={{\n        //     url: \"spoon.svg\",\n        //     scaledSize: new window.google.maps.Size(30, 30),\n        //     origin: new window.google.maps.Point(0, 0),\n        //     anchor: new window.google.maps.Point(15, 15),\n        //   }}\n        ,\n        onClick: () => {\n          setSelected(restaurant);\n        }\n      }, restaurant.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this)), selected ? /*#__PURE__*/_jsxDEV(InfoWindow, {\n        position: {\n          lat: selected.lat,\n          lng: selected.lng\n        },\n        onCloseClick: () => {\n          setSelected(null);\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \" Description here \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Restaurants list last updated\", \" \", formatRelative(selected.time, new Date())]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"zdfuILVhRjiUpE7U7eS5qGQL6r4=\", false, function () {\n  return [useLoadScript];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/ada/capstone-scratch/Scratch/src/components/Map.js"],"names":["React","useState","useEffect","GoogleMap","useLoadScript","Marker","InfoWindow","mapStyles","formatRelative","restaurantCollection","db","Restaurants","data","firebaseLooper","axios","RestaurantList","restaurantData","id","lat","lng","time","Date","mapContainerStyle","width","height","center","options","styles","disableDefaultUI","zoomControl","onLoad","marker","console","log","position","App","restaurantMarkers","setRestaurantMarkers","collection","get","then","snapshot","restaurants","catch","e","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","selected","setSelected","map","restaurant"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport {\n  GoogleMap,\n  useLoadScript,\n  Marker,\n  InfoWindow,\n} from \"@react-google-maps/api\";\n\nimport mapStyles from \"../mapStyles\";\nimport { formatRelative } from \"date-fns\";\nimport { restaurantCollection, db } from \"../utils/firebase.js\";\nimport Restaurants from \"./restaurants/restaurants\";\nimport { data } from \"browserslist\";\nimport { firebaseLooper } from \"../utils/helper\";\nimport axios from 'axios';\nimport RestaurantList from \"./components/listall\";\n\n\n\n\nconst restaurantData = [\n  { id: 1, lat: 47.620084, lng: -122.320126, time: new Date() },\n  { id: 2, lat: 47.614579, lng: -122.333224, time: new Date() },\n  { id: 3, lat: 47.618578, lng: -122.321079, time: new Date() },\n];\n\nconst mapContainerStyle = {\n  width: \"90vw\",\n  height: \"90vh\",\n};\n\nconst center = {\n  lat: 47.620084,\n  lng: -122.320126,\n};\n\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true,\n};\n\nconst onLoad = (marker) => {\n  console.log(\"marker: \", marker);\n};\nconst position = {\n  lat: 47.605,\n  lng: -122.3344,\n};\n\nconst App = () => {\n  const [restaurantMarkers, setRestaurantMarkers] = useState([]);\n  // const [restaurants, setRestaurants] = useState([]);\n\n\n  // useEffect(() => {\n// \n    // axios.get('https://yuliacapstone-default-rtdb.firebaseio.com/restaurants.json')\n    //     .then(  response => {\n    //             // this.setState({\n    //             console.log('hi')\n    //             //     restaurants\n    //             // });\n    //             console.log(response.data)\n    //             setRestaurants(response.data)\n\n    //             // console.log(this.state,'<---restaurants state')\n    //         }).catch(error=> {\n    //             console.log(error)\n    //             console.log('random')\n    //         });\n    //       }, []);\n\n          \n\n\n    \n\n\n  useEffect(() => {\n    db.collection(\"restaurants\")\n      .get()\n      .then((snapshot) => {\n        const restaurants = firebaseLooper(snapshot);\n        console.log(restaurants);\n        setRestaurantMarkers(restaurants);\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  }, []);\n\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n  });\n\n  const [selected, setSelected] = React.useState(null);\n\n  if (loadError) return \"Error loading maps\";\n  return (\n    <div>\n      {isLoaded && (\n        <GoogleMap\n          mapContainerStyle={mapContainerStyle}\n          zoom={13}\n          center={center}\n          options={options}\n          id=\"marker-example\"\n        >\n          {restaurantData.map((restaurant) => (\n            <Marker\n              key={restaurant.id}\n              onLoad={onLoad}\n              position={{ lat: restaurant.lat, lng: restaurant.lng }}\n              //   icon={{\n              //     url: \"spoon.svg\",\n              //     scaledSize: new window.google.maps.Size(30, 30),\n              //     origin: new window.google.maps.Point(0, 0),\n              //     anchor: new window.google.maps.Point(15, 15),\n              //   }}\n              onClick={() => {\n                setSelected(restaurant);\n              }}\n            />\n          ))}\n\n          {selected ? (\n            <InfoWindow\n              position={{ lat: selected.lat, lng: selected.lng }}\n              onCloseClick={() => {\n                setSelected(null);\n              }} \n            >\n              <div>\n                <h2> Description here </h2>\n                <p>\n                  Restaurants list last updated{\" \"}\n                  {formatRelative(selected.time, new Date())}\n                </p>\n              </div>\n            </InfoWindow>\n          ) : null}\n        </GoogleMap>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}