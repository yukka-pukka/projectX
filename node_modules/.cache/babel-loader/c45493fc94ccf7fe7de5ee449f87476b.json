{"ast":null,"code":"var _jsxFileName = \"/Users/ada/capstone-file/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { GoogleMap, useLoadScript, Marker, InfoWindow, MarkerClusterer } from '@react-google-maps/api';\nimport mapStyles from \"./mapStyles\";\nimport { formatRelative } from \"date-fns\";\nimport { restaurantCollection, db } from './utils/firebase.js';\nimport Restaurants from \"./components/restaurants/restaurants\";\nimport { data } from \"browserslist\";\nimport { firebaseLooper } from \"./utils/helper\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst restaurantData = [{\n  id: 1,\n  lat: 47.597998,\n  lng: -122.318739,\n  time: new Date()\n}, {\n  id: 2,\n  lat: 47.600757,\n  lng: -122.332526,\n  time: new Date()\n}, {\n  id: 3,\n  lat: 47.598528,\n  lng: -122.326986,\n  time: new Date()\n}];\nconst mapContainerStyle = {\n  width: '90vw',\n  height: '90vh'\n};\nconst center = {\n  lat: 47.599940,\n  lng: -122.327750\n};\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true\n};\n\nconst onLoad = marker => {\n  console.log('marker: ', marker);\n};\n\nconst position = {\n  lat: 47.6050,\n  lng: -122.3344\n};\n\nconst App = () => {\n  _s();\n\n  // state to hold all library object locations that we can pass to maps API. calling helper function to set initial state\n  const [restaurantMarkers, setRestaurantMarkers] = useState([]);\n  useEffect(() => {\n    db.collection('restaurants').get().then(snapshot => {\n      const restaurants = firebaseLooper(snapshot);\n      console.log(restaurants);\n      setRestaurantMarkers(restaurants);\n    }).catch(e => {\n      console.log(e);\n    });\n  }, []);\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\n  });\n  const [selected, setSelected] = React.useState(null); // const onMapClick = React.useCallback((event) => {\n  //   setMarkers(current => [ //when user clicks, call the setMarkers function. Is that built in??\n  //     ...current, \n  //     {  \n  //     lat: event.latLng.lat(),\n  //     lng: event.latLng.lng(),\n  //     time: new Date(),\n  //   },\n  // ]); \n  // }, []);\n  // if (loadError) return \"Error loading maps\";\n  // if (!isLoaded) return \"Loading Maps\";\n  //props: container, see notes above where the variable is\n  //position the map\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 12\n  }, this);\n};\n\n_s(App, \"sjYmJZ7y2f/oQdiptod4J0oPrpM=\", false, function () {\n  return [useLoadScript];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/ada/capstone-file/src/App.js"],"names":["React","useState","useEffect","GoogleMap","useLoadScript","Marker","InfoWindow","MarkerClusterer","mapStyles","formatRelative","restaurantCollection","db","Restaurants","data","firebaseLooper","restaurantData","id","lat","lng","time","Date","mapContainerStyle","width","height","center","options","styles","disableDefaultUI","zoomControl","onLoad","marker","console","log","position","App","restaurantMarkers","setRestaurantMarkers","collection","get","then","snapshot","restaurants","catch","e","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","selected","setSelected"],"mappings":"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","sourcesContent":["\nimport React, { useState, useEffect } from 'react';\n\nimport {\n    GoogleMap,\n    useLoadScript,\n    Marker,\n    InfoWindow,\n    MarkerClusterer,\n} from '@react-google-maps/api';\n\n\n\n\nimport mapStyles from \"./mapStyles\";\nimport { formatRelative } from \"date-fns\";\nimport { restaurantCollection, db } from './utils/firebase.js'\nimport Restaurants from \"./components/restaurants/restaurants\";\nimport { data } from \"browserslist\";\nimport { firebaseLooper } from \"./utils/helper\";\n\nconst restaurantData = [\n    {   id: 1,\n        lat:47.597998,\n        lng:-122.318739,\n        time: new Date()\n    },\n    {   id: 2,\n        lat:47.600757,\n        lng:-122.332526,\n        time: new Date()\n    },\n    {   id: 3,\n        lat:47.598528,\n        lng:-122.326986,\n        time: new Date()\n    }\n\n\n]\n\nconst mapContainerStyle = {\n    width: '90vw',\n    height: '90vh',\n}\n\nconst center = {\n    lat: 47.599940,\n    lng: -122.327750,\n}\n\nconst options = {\n    styles: mapStyles,\n    disableDefaultUI: true,  \n    zoomControl: true,\n}\n\nconst onLoad = marker => {\n    console.log('marker: ', marker)\n}\nconst position = {\n    lat: 47.6050,\n    lng: -122.3344\n}\n\nconst App = () => {\n    \n        // state to hold all library object locations that we can pass to maps API. calling helper function to set initial state\n    const[restaurantMarkers, setRestaurantMarkers] = useState([]);\n    \n    useEffect(() => {\n            \n        db.collection('restaurants').get().then(snapshot => {\n            const restaurants = firebaseLooper(snapshot);\n            console.log(restaurants);\n            setRestaurantMarkers(restaurants)\n        }).catch (e => {\n            console.log(e)\n        })\n    },[]);\n        \n    const {isLoaded, loadError} = useLoadScript({\n        googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n        \n    });\n     \n    const [selected, setSelected] = React.useState(null);\n        \n    \n        \n   \n    \n\n\n\n    // const onMapClick = React.useCallback((event) => {\n    //   setMarkers(current => [ //when user clicks, call the setMarkers function. Is that built in??\n    //     ...current, \n    //     {  \n    //     lat: event.latLng.lat(),\n    //     lng: event.latLng.lng(),\n    //     time: new Date(),\n    //   },\n    // ]); \n    // }, []);\n\n\n    // if (loadError) return \"Error loading maps\";\n    // if (!isLoaded) return \"Loading Maps\";\n    //props: container, see notes above where the variable is\n    //position the map\n    return <div>\n\n        {/* <GoogleMap \n        mapContainerStyle={mapContainerStyle} \n        zoom = {15} \n        center = {center}\n        options = { options }\n        id= \"marker-example\"\n\n        >\n        {restaurantData.map((marker => (\n        <Marker \n            key={marker.id}     \n            onLoad={onLoad}\n            position = {{lat: marker.lat, lng: marker.lng}}\n            // position = { position }\n            icon= {{\n            url: 'spoon.svg',\n            scaledSize: new window.google.maps.Size(30,30),\n            origin: new window.google.maps.Point(0,0),\n            anchor: new window.google.maps.Point(15,15) \n            }}\n            onClick={() => {\n            setSelected(marker);\n            }}\n            />\n        )))}\n        \n        {selected ? (\n        <InfoWindow position= {{lat: selected.lat, lng: selected.lng}} onCloseClick = {() => {\n        setSelected(null)}} //have to reset to null once x is clicked on window so that they can pop up agian when clicked\n        >\n        <div>\n            <h2> image goes here </h2>\n            <p>Restaurants list last updated {formatRelative(selected.time, new Date())}</p>\n        </div>\n        </InfoWindow>\n        ) : null} \n        </GoogleMap> */}\n        </div>;\n    };\n\n    \nexport default App;\n"]},"metadata":{},"sourceType":"module"}